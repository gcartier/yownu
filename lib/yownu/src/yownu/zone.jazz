;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.zone jazz


(import (jazz.opengl.render)
        (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.context)
        (world.geometry)
        (world.index)
        (world.math)
        (world.planet)
        (world.render)
        (world.sector)
        (world.settings)
        (world.skybox)
        (world.zone)
        (yownu.biome))


(class Yownu-Zone extends Zone
  
  
  ;; for now an explicit list of planets
  (slot planets initialize #f getter generate)
  
  
  (method override (planets? self)
    #t)
  
  
  ;;;
  ;;;; Populate
  ;;;
  
  
  (method override (populate-zone self)
    (let ((space-radius (world-setting 'yownu.radius 250.))
          (space-density (world-setting 'yownu.density 5)))
      (define (place-planets)
        (set! planets '())
        (loop (repeat space-density)
              (let ((position (random-space))
                    (size (random-between (world-setting 'yownu.planet-min-size 5.) (world-setting 'yownu.planet-max-size 50.)))
                    (biome (random-biome)))
                (let ((image (get-earth biome)))
                  (let ((planet (new Planet parent: self position: position size: size image: image)))
                    (set! planets (cons planet planets))
                    (generate-planet planet)
                    (add-element self planet)
                    @convert
                    (let ((trees (get-trees biome)))
                      (when trees
                        (populate-trees self planet trees))))))))
      
      (define (random-space)
        (vertex (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)))
      
      (site populate
        (place-planets))
      @convert
      (place-player self)))
  
  
  (method (populate-trees self planet trees)
    (let ((world (current-world)))
      (let ((size (get-size planet)))
        (loop (repeat (random (fxround (* (world-setting 'yownu.planet-trees 10.) size))))
              (let ((model (random-element trees)))
                (receive (dir pos) (random-position self planet)
                  (let ((entity (place-model world model pos savable?: #f)))
                    (realign-lookat entity dir))))))))
  
  
  (method package (place-player self)
    (let ((me (current-me))
          (planets (collect-planets self)))
      (unless (null? planets)
        (let ((planet (random-element planets)))
          (receive (dir pos) (random-position self planet 25.)
            (set-position me pos)
            (realign-lookat me dir))))))
  
  
  (method (random-position self planet (surface-distance 0.))
    (let ((world (current-world)))
      (let ((position (get-position planet))
            (radius (get-radius planet))
            (dir (random-direction)))
        (let ((pos (vertex+ position (vertex-scalar*& dir (+ radius surface-distance)))))
          (values dir pos)))))
  
  
  ;;;
  ;;;; Generate
  ;;;
  
  
  (method override (generate-visual self sector <Sector>)
    (let ((faces (section-faces self (get-index sector))))
      (when faces
        (bind-values (vertices neighbors) (prepare-vertices/neighbors sector faces)
          (let ((lightmap (prepare-lightmap sector faces)))
            (with-render-mutex
              (lambda ()
                (free-material-mesh sector)
                (setup-material-mesh sector)
                (let ((mesh (get-material-mesh sector)))
                  (fill-vertices/neighbors sector mesh #f vertices neighbors)
                  (fill-lightmap sector mesh #f lightmap)
                  (setup-array mesh))))))))
    (set-visual-uptodate? sector #t)
    (set-visual-revision sector (get-revision generator))
    (set-visual-generating? sector #f)
    (decrease-sectors-generating self 1)
    (increase-sectors-generated self))
  
  
  ;; quick try
  (method override (generate-physical self area revision-update?)
    (let ((faces (section-faces self (get-index area))))
      (when faces
        (let ((areas (make-table test: equal?)))
          (for-each (lambda (face)
                      (let ((poly (get-polygon face)))
                        (let ((center (get-center poly)))
                          (let ((index (position-index area center)))
                            (table-add areas index poly)))))
                    faces)
          (table-iterate areas
            (lambda (index polygons)
              (add-polygons area #f index polygons #f)))))))
  
  
  ;; quick try
  (method (section-faces self index)
    ;; quick hack
    (if (not planets)
        #f
    (continuation-capture
      (lambda (return)
        (for-each (lambda (planet)
                    (table-iterate (generate-planet planet)
                      (lambda (idx faces)
                        (when (index=? idx index)
                          (continuation-return return faces)))))
                  planets)
        #f))))
  
  
  ;;;
  ;;;; Blocks
  ;;;
  
  
  (method override (album-name self)
    'yownu)
  
  
  (method override (create-atlas self)
    (let ((world (current-world)))
      (if (not (get-earth? world))
          (nextmethod self)
        (make-block-atlas self
          adder: (lambda (atlas)
                   (add-file atlas (find-texture-file world "turf"))
                   (add-file atlas (find-texture-file world "greek"))
                   (add-file atlas (find-texture-file world "ground"))
                   (add-file atlas (find-texture-file world "fire"))
                   (add-file atlas (find-texture-file world "funky"))
                   (add-file atlas (find-texture-file world "roman"))
                   @w
                   (add-file atlas (find-texture-file world "earth")))))))
  
  
  ;;;
  ;;;; Skybox
  ;;;
  
  
  (method override (prepare-skybox self)
    (install-skybox self (find-skybox "nebula")))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (zone-editable? self)
    #f)))
