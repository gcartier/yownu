;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.zone jazz


(import (jazz.syntax (phase syntax))
        (world)
        (world.autoload)
        (world.geometry)
        (world.planet)
        (world.settings)
        (world.skybox)
        (world.syntax (phase syntax))
        (world.zone)
        (yownu.biome))


(class Yownu-Zone extends Zone
  
  
  (method override (planets? self)
    #t)
  
  
  ;;;
  ;;;; Populate
  ;;;
  
  
  (method override (populate-zone self)
    (let ((space-radius (world-setting 'yownu.radius 250.))
          (space-density (world-setting 'yownu.density 5)))
      (define (place-planets)
        (loop (repeat space-density)
              (let ((position (random-space))
                    (size (random-between (world-setting 'yownu.planet-min-size 5.) (world-setting 'yownu.planet-max-size 50.)))
                    (biome (random-biome)))
                (let ((image (get-earth biome)))
                  (let ((planet (new Planet parent: self position: position size: size image: image)))
                    (generate-planet planet)
                    (add-element self planet)
                    (let ((trees (get-trees biome)))
                      (when trees
                        (populate-trees self planet trees))))))))
      
      (define (random-space)
        (vertex (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)))
      
      (site (populate on?: #f)
        (place-planets))
      (place-player self)))
  
  
  (method (populate-trees self planet trees)
    (let ((world (current-world)))
      (let ((size (get-size planet)))
        (loop (repeat (random (fxround (* (world-setting 'yownu.planet-trees 10.) size))))
              (let ((model (random-element trees)))
                (receive (dir pos) (random-position self planet)
                  (let ((entity (place-model world model pos savable?: #f)))
                    (realign-lookat entity dir))))))))
  
  
  (method package (place-player self)
    (let ((me (current-me))
          (planets (collect-planets self)))
      (unless (null? planets)
        (let ((planet (random-element planets)))
          (receive (dir pos) (random-position self planet 25.)
            (set-position me pos)
            (realign-lookat me dir))))))
  
  
  (method (random-position self planet (surface-distance 0.))
    (let ((world (current-world)))
      (let ((position (get-position planet))
            (radius (get-radius planet))
            (dir (random-direction)))
        (let ((pos (vertex+ position (vertex-scalar*& dir (+ radius surface-distance)))))
          (values dir pos)))))
  
  
  ;;;
  ;;;; Blocks
  ;;;
  
  
  (method override (album-name self)
    'yownu)
  
  
  (method override (create-atlas self)
    (let ((world (current-world)))
      (if (not (get-earth? world))
          (nextmethod self)
        (make-block-atlas self
          adder: (lambda (atlas)
                   (add-file atlas (find-texture-file world "earth")))))))
  
  
  ;;;
  ;;;; Skybox
  ;;;
  
  
  (method override (prepare-skybox self)
    (install-skybox self (find-skybox "nebula")))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (zone-editable? self)
    #f)))
