;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.client jazz


(import (jazz.catalog)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.jazz.stub)
        (jazz.editor.lisp)
        (jazz.graphic.opengl.window)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.client)
        (world.client.actions)
        (world.client.bars)
        (world.interface.actions)
        (world.interface.bars)
        (world.role)
        (world.settings)
        (world.syntax (phase syntax))
        (yownu.debugger)
        (yownu.window))


(class Yownu-Client extends World-Client
  
  
  (slot yownu-settings initialize #f getter generate)
  (slot local-debugger initialize #f)
  (slot cataloguer     initialize (new Cataloguer))

  
  (method override (process-name)
    "Yownu")
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? (not (get-controller-debugger)) 'default) (shift-down?)))
          (pos (find-setting 'world.position {Point 50 50}))
          (size (find-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: Yownu-Window fullscreen?: fullscreen? position: pos size: size render?: #f visible?: #f)))
  
  
  (method override (settings-root)
    {Directory Home ".yownu"})
  
  
  (method override (settings-alias)
    'App)
  
  
  (method override (initialize-app)
    (register-alias 'App
                    (list (if (is-alias? 'Yownu)
                              'Yownu
                            'Build))))
  
  
  (method override (initialize-settings)
    (nextmethod)
    (register-alias 'Root (get-list~ (get-parent~ (get-parent~ {Directory App}))))
    (register-alias 'Yownu-World '(Root "worlds" "yownu"))
    (set! yownu-settings (new File-Settings))
    (register-settings yownu-settings)
    (set-setting~ yownu-settings 'world.world-directories '(("yownu" . {Directory Yownu-World})))
    (set-setting~ yownu-settings 'world.worlds-directories #f))
  
  
  (method override (default-preferences)
    (new Yownu-Preferences))
  
  
  (method override (default-bindings)
    (new Yownu-Bindings))
  
  
  (method override (use-profile?)
    #f)
  
  
  ;; copy-pasted from IDE
  (method override (get-local-debugger)
    local-debugger)
  
  
  ;; copy-pasted from IDE
  (method override (install-process)
    (nextmethod)
    (start-debuggers))
  
  
  (method override (finish-process)
    (nextmethod)
    (setup-cataloguer)
    ;; a try
    (set-debugger-manager (new Debugger-Manager)))
  
  
  ;; copy-pasted from IDE
  (method override (conclude-environment)
    (nextmethod)
    ;; do this at the last moment possible because any error beyond this point
    ;; will be handled by the IDE itself which must thus be fully functional
    (if (get-controller-debugger)
        (attach-process~ local-debugger (get-local-process) #t)
      (when (and kernel-source-access? (find-setting 'yownu.debugger? #f))
        (attach-to-controller (get-local-register) #t)
        (with-system-exception-debugger
          (lambda ()
            (ready-to-controller)
            (transmit-runtime-information~ (get-local-process) 'all)
            (current-input-port (console-input-port))
            (current-output-port (console-output-port)))))))
  
  
  ;;;
  ;;;; Closing
  ;;;
  
  
  (method override (close-environment)
    (save-catalogs~ cataloguer)
    (nextmethod))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'yownu))
            (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-teleport-player evt)
    (let ((zone (current-zone)))
      (if (eq? (category-name (class-of zone)) 'Yownu-Zone)
          (place-player~ zone)
        (bell))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file)
    (world-file '("devel" "yownu" "News.ftx") 'App))
  
  
  (method override (roadmap-file)
    (world-file '("devel" "yownu" "Roadmap.ftx") 'App))
  
  
  (method override (help-file)
    (world-file '("devel" "yownu" "Help.ftx") 'App))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  ;; copy-pasted from IDE
  (method override (register-base-objects)
    (nextmethod)
    (register-object~ (get-local-register) 'debugger (new Jazz-Debugger-Local-Proxy local-debugger)))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-units)
    '(tutorial.objectives))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-console)
    (if (remote-proxy? (get-controller-debugger))
        (nextmethod)
      ;; no REPL until Yownu internal consoles
      (select-console)))
  
  
  ;; copy-pasted from IDE
  (method (start-debuggers)
    (when (not local-debugger)
      (set! local-debugger (new Yownu-Debugger))
      (start-debugger~ local-debugger)
      (register-debugger local-debugger)
      (set-current-debugger local-debugger)))
  
  
  ;;;
  ;;;; Cataloguer
  ;;;
  
  
  (method override (get-cataloguer)
    cataloguer)
  
  
  (method (setup-cataloguer)
    (define (world-catalog)
      (let ((output {File Settings "work" "catalogs" "world.jcat"})
            (directories {Directory Yownu-World})
            (extensions :jazz))
        (new Filing-Catalog 'world output directories extensions #f #f #t)))
    
    (define (user-catalog)
      (let ((output {File Settings "work" "catalogs" "user.jcat"})
            (directories {Directory Settings})
            (extensions :jazz))
        (new Filing-Catalog 'user output directories extensions #f #f #t)))
    
    (add-catalog~ cataloguer (world-catalog))
    (add-catalog~ cataloguer (user-catalog))
    (for-each-active-catalog~ cataloguer #f
      (lambda (catalog)
        (load-content~ catalog report?: #f)
        (update~ catalog report?: #t))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (setup-application-interface)
    (install-bars
      `((,World-Main-Bar      main      horizontal (center -10))
        (,World-Game-Bar      game      horizontal (center -36))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Models-Bar    models    horizontal (10 -24.) #f)
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        (,World-Interface-Bar interface vertical   (-10 center))
        (,World-Tutorial-Bar  tutorial  horizontal (10 10) #f)
        (,World-Objective-Bar objective horizontal (114 10) #f)
        (,World-Collision-Bar collision horizontal (-10 36) #f)
        (,World-Minecraft-Bar minecraft vertical   (-10 -98) #f))))


  ;;;
  ;;;; Roles
  ;;;


  (method public (user-role?)
    (eq? current-role 'user))


  (method public (programmer-role?)
    (eq? current-role 'programmer))


  (define-trait user-bindings Bindings
    (<Role-Trait>
      (<install>
        (<world-menu!>
          (<!>           name: view-help              visible?: #f))
        (<world-world!>
          (<!>           name: world-new              visible?: #f)
          (<!>           name: world-open             visible?: #f)
          (<!>           name: world-save             visible?: #f)
          (<!>           name: world-save-as          visible?: #f)
          (<!>           name: world-revert           visible?: #f))
        (<world-server!>
          (<!>           name: connect-to-server      visible?: #f)
          (<!>           name: disconnect-from-server visible?: #f)
          (<!>           name: request-server-update  visible?: #f))
        (<world-camera!>
          (<!>           name: toggle-camera-lock     visible?: #f))
        (<world-graphics!>
          (<!>           name: toggle-lighting        visible?: #f)
          (<!>           name: toggle-gadgets         visible?: #f))
        (<world-edition!>
          (<!>           name: textures-showcase      visible?: #f)
          (<!>           name: import-model           visible?: #f)
          (<!>           name: reload-textures        visible?: #f))
        (<world-history!>
          (<!>           name: step-logic             visible?: #f)
          (<!>           name: rewind-logic           visible?: #f)
          (<!>           name: toggle-history         visible?: #f)
          (<!>           name: reset-history          visible?: #f)
          (<!>           name: toggle-evaluate-future visible?: #f))
        (<world-window!>
          (<!>           name: live-gaia/world        visible?: #f)
          (<!>           name: design-gaia/world      visible?: #f)
          (<!>           name: restore-gaia/world     visible?: #f))
        (<world-tutorial!>)
        (<world-debug!>
          (<!>           name: toggle-target          visible?: #f)
          (<!>           name: toggle-script          visible?: #f)
          (<!>           name: toggle-debug-sectors   visible?: #f)
          (<!>           name: toggle-debug-areas     visible?: #f)
          (<!>           name: toggle-draw-atlas      visible?: #f)
          (<!>           name: toggle-draw-me         visible?: #f)
          (<!>           name: toggle-gc-sound        visible?: #f)
          (<!>           name: reset-marks            visible?: #f)
          (<!>           name: clear-console          visible?: #f)
          (<!>           name: clear-terminal         visible?: #f)
          (<!>           name: garbage-collect        visible?: #f)
          (<!>           name: explore-interface      visible?: #f)
          (<!>           name: test1                  visible?: #f)
          (<!>           name: test2                  visible?: #f)
          (<!>           name: test3                  visible?: #f)
          (<!>           name: test4                  visible?: #f)
          (<!>           name: test5                  visible?: #f)
          (<!>           name: test6                  visible?: #f)
          (<!>           name: test7                  visible?: #f)
          (<!>           name: test8                  visible?: #f)
          (<!>           name: test9                  visible?: #f)
          (<!>           name: test0                  visible?: #f)))))
  
  (define-trait user-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: world-new              visible?: #f)
        (<!>             name: world-open             visible?: #f)
        (<!>             name: world-save             visible?: #f)
        (<!>             name: world-revert           visible?: #f))))
  
  (define-trait user-interface World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-lighting        visible?: #f)
        (<!>             name: toggle-gadgets         visible?: #f))))

  (define-trait user-camera World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-camera-lock     visible?: #f))))

  (define-trait user-edition World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: textures-showcase      visible?: #f))))

  (define-trait user-models World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: import-model           visible?: #f))))

  (define-trait user-history World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: step-logic             visible?: #f)
        (<!>             name: rewind-logic           visible?: #f)
        (<!>             name: toggle-history         visible?: #f)
        (<!>             name: reset-history          visible?: #f)
        (<!>             name: toggle-evaluate-future visible?: #f))))
  
  (define-trait user-window World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: live-gaia/world        visible?: #f)
        (<!>             name: design-gaia/world      visible?: #f)
        (<!>             name: restore-gaia/world     visible?: #f))))
  
  (define-trait user-tutorial World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait user-objective World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait user-debug World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-target          visible?: #f)
        (<!>             name: toggle-script          visible?: #f)
        (<!>             name: toggle-debug-sectors   visible?: #f)
        (<!>             name: toggle-debug-areas     visible?: #f)
        (<!>             name: toggle-draw-atlas      visible?: #f)
        (<!>             name: toggle-draw-me         visible?: #f)
        (<!>             name: reset-marks            visible?: #f)
        (<!>             name: clear-terminal         visible?: #f)
        (<!>             name: garbage-collect        visible?: #f)
        (<!>             name: explore-interface      visible?: #f))))

  (definition user-role
    `((:bindings ,user-bindings)
      (main ,user-main)
      (interface ,user-interface)
      (camera ,user-camera)
      (edition ,user-edition)
      (models ,user-models)
      (history ,user-history)
      (window ,user-window)
      (tutorial ,user-tutorial)
      (objective ,user-objective)
      (debug ,user-debug)))


  (define-trait programmer-bindings Bindings
    (<Role-Trait>
      (<install>)))
  
  (define-trait programmer-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!> name: world-new    visible?: #f)
        (<!> name: world-open   visible?: #f)
        (<!> name: world-save   visible?: #f)
        (<!> name: world-revert visible?: #f))))

  (definition programmer-role
    `((:bindings ,programmer-bindings)
      (main ,programmer-main)))
  
  
  (method override (role-traits role)
    (case role
      ((user) user-role)
      ((programmer) programmer-role)
      (else (nextmethod role)))))


;;;
;;;; Preferences
;;;


(class Yownu-Preferences extends IDE-Preferences
  
  
  (form
    (<install> toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status})))))


;;;
;;;; Bindings
;;;


(class Yownu-Bindings extends IDE-Bindings
  
  
  (form
    (<install>
      (<World-Menu-Actions>      name: world-menu)
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Server-Actions>    name: world-server)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Tutorial-Actions>  name: world-tutorial)
      (<World-Objective-Actions> name: world-objective)
      (<World-Collision-Actions> name: world-collision)
      (<World-Minecraft-Actions> name: world-minecraft)
      (<World-Anonymous-Actions> name: world-anonymous)
      (<Yownu-Actions>           name: yownu))))


;;;
;;;; Actions
;;;


(class Yownu-Actions extends World-Actions
  
  
  (form
    (<install>                             title: "Yownu"
      (<Action-Item> name: teleport-player title: "Teleport Player" action-handler: {Event-Handler :application on-teleport-player} shortcut: {Shortcut :alt #\P}))))


;;;
;;;; Expressions
;;;


(define-expression define-objective
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("objective")))
