;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.client jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.stub)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.reference)
        (jazz.settings)
        (jazz.version)
        (world)
        (world.autoload)
        (world.client)
        (world.client.actions)
        (world.client.bars)
        (world.history)
        (world.interface.actions)
        (world.interface.bars)
        (world.role)
        (world.settings)
        (world.syntax (phase syntax))
        (yownu.debugger)
        (yownu.window))


(class Yownu-Client extends World-Client
  
  
  (slot yownu-settings initialize #f getter generate)
  (slot local-debugger initialize #f)

  
  (method override (process-name)
    "Yownu")
  
  
  (method override (process-version)
    {Version 1 0 closed-beta})
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? (not (get-controller-debugger))) (shift-down?)))
          (pos (world-setting 'world.position {Point 250 100}))
          (size (world-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: Yownu-Window fullscreen?: fullscreen? position: pos size: size need-version: {Version 3 2} render?: #f visible?: #f)))
  
  
  (method override (initialize-settings)
    (nextmethod)
    (set! yownu-settings (new File-Settings))
    (register-settings yownu-settings)
    (register-alias 'Root (get-list~ (get-parent~ (get-parent~ {Directory App}))))
    (register-alias 'Yownu-World '(Root "worlds" "yownu"))
    (when (not (exists?~ {Directory Yownu-World}))
      (system-message (format "Unable to find Yownu's world: {a}" (parse~ {Directory Yownu-World}))
                      type: 'problem
                      title: "Yownu")
      (exit 1))
    (set-setting~ yownu-settings 'world.world-directories '(("yownu" . {Directory Yownu-World})))
    (set-setting~ yownu-settings 'world.worlds-directories #f))
  
  
  (method override (default-preferences)
    (new Yownu-Preferences))
  
  
  (method override (default-bindings)
    (new Yownu-Bindings))
  
  
  (method override (use-profile?)
    #f)
  
  
  ;; copy-pasted from IDE
  (method override (get-local-debugger)
    local-debugger)
  
  
  ;; copy-pasted from IDE
  (method override (install-process)
    (nextmethod)
    (start-debuggers))
  
  
  (method override (finish-process)
    (nextmethod)
    ;; a try
    (set-debugger-manager (new Debugger-Manager)))
  
  
  ;; copy-pasted from IDE
  (method override (conclude-environment)
    (nextmethod)
    ;; do this at the last moment possible because any error beyond this point
    ;; will be handled by the IDE itself which must thus be fully functional
    (if (get-controller-debugger)
        (attach-process~ local-debugger (get-local-process) #t)
      (when (and kernel-source-access? (world-setting 'yownu.debugger? #f))
        (attach-to-controller (get-local-register) #t)
        (with-system-exception-debugger
          (lambda ()
            (ready-to-controller)
            (transmit-runtime-information~ (get-local-process) 'all)
            (current-input-port (console-input-port))
            (current-output-port (console-output-port)))))))
  
  
  ;;;
  ;;;; Closing
  ;;;
  
  
  (method override (close-environment)
    (let ((cataloguer (get-cataloguer)))
      (when cataloguer
        (save-catalogs~ cataloguer)))
    (nextmethod))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'yownu))
            (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-teleport-player evt)
    (let ((zone (current-zone)))
      (if (eq? (category-name (class-of zone)) 'Yownu-Zone)
          (place-player~ zone)
        (bell))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file)
    (world-file '("devel" "yownu" "News.ftx") 'Resources))
  
  
  (method override (roadmap-file)
    (world-file '("devel" "yownu" "Roadmap.ftx") 'Resources))
  
  
  (method override (help-file)
    (world-file '("devel" "yownu" "Help.ftx") 'Resources))
  
  
  (method override (about-file)
    (world-file '("devel" "yownu" "About.ftx") 'Resources))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  ;; copy-pasted from IDE
  (method override (register-base-objects)
    (nextmethod)
    (register-object~ (get-local-register) 'debugger (new Jazz-Debugger-Local-Proxy local-debugger)))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (runtime-units)
    '(tutorial.objectives))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-console)
    (if (remote-proxy? (get-controller-debugger))
        (nextmethod)
      ;; no REPL until Yownu internal consoles
      (select-console)))
  
  
  ;; copy-pasted from IDE
  (method (start-debuggers)
    (when (not local-debugger)
      (set! local-debugger (new Yownu-Debugger))
      (start-debugger~ local-debugger)
      (register-debugger local-debugger)
      (set-current-debugger local-debugger)))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method override (setup-cataloguer)
    (define (world-catalog)
      (let ((output {File Settings "work" "catalogs" "world.jcat"})
            (directories {Directory Yownu-World})
            (extensions :jazz))
        (new Filing-Catalog 'world output directories extensions #f #f #t)))
    
    (define (user-catalog)
      (let ((output {File Settings "work" "catalogs" "user.jcat"})
            (directories {Directory Settings})
            (extensions :jazz))
        (new Filing-Catalog 'user output directories extensions #f #f #t)))
    
    ;; pretty costly
    (when (world-setting 'world.catalog? #f)
      (let ((cataloguer (new Cataloguer)))
        (add-catalog~ cataloguer (world-catalog))
        (add-catalog~ cataloguer (user-catalog))
        (for-each-active-catalog~ cataloguer #f
          (lambda (catalog)
            (load-content~ catalog report?: #f)
            (update~ catalog report?: #t)))
        (set-cataloguer cataloguer))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (setup-application-interface)
    (let ((world (current-world)))
      (let ((interface (get-interface~ world)))
        (new History-Slider name: 'slider parent: interface size: {Dimension 400 40} location: '(center 32) visible?: #f)))
    (install-bars
      `(,(case current-role
           ((user)
            `(,World-Main-Bar      main      horizontal (-105 -10)))
           (else
            `(,World-Main-Bar      main      horizontal (center -10))))
        ;; (,World-Client-Bar    client    horizontal (10 -98)) ;; overlaps the script pane
        ,(case current-role
           ((user)
            `(,World-Game-Bar      game      horizontal (center -10)))
           (else
            `(,World-Game-Bar      game      horizontal (center -36))))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Models-Bar    models    horizontal (10 -24.) #f)
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        ,(case current-role
           ((user)
            `(,World-Interface-Bar interface horizontal (10 -10)))
           (else
            `(,World-Interface-Bar interface vertical   (-10 center))))
        (,World-Tutorial-Bar  tutorial  horizontal (10 10) #f)
        (,World-Objective-Bar objective horizontal (114 10) #f)
        (,World-Collision-Bar collision horizontal (-10 36) #f)
        (,World-Minecraft-Bar minecraft vertical   (-10 -62) #f))))


  ;;;
  ;;;; Roles
  ;;;
  
  
  (method override (customize-roles)
    (when (neq? initial-role 'user)
      (set-property~ (child~ (child~ (get-client-form~ user-bindings) 'world-world) 'toggle-user) 'visible? #t)
      (set-property~ (child~ (get-client-form~ user-main) 'toggle-user) 'visible? #t)))
  
  
  (method override (role-traits role)
    (case role
      ((user) user-role)
      ((designer) designer-role)
      ((programmer) programmer-role)
      (else (nextmethod role))))


  ;;;
  ;;;; User
  ;;;


  (define-trait user-bindings Bindings
    (<Role-Trait>        name: user
      (<install>
        (<world-menu!>
          (<!>           name: view-help               visible?: #f))
        (<world-world!>
          (<!>           name: world-new               visible?: #f)
          (<!>           name: world-open              visible?: #f)
          (<!>           name: world-save              visible?: #f)
          (<!>           name: world-save-as           visible?: #f)
          (<!>           name: world-revert            visible?: #f)
          (<!>           name: toggle-user             visible?: #f))
        (<world-zone!>
          (<!>           name: zone-new                visible?: #f)
          (<!>           name: zone-open               visible?: #f))
        (<world-game!>
          (<!>           name: change-vehicle          visible?: #f)
          (<!>           name: mind-control            visible?: #f)
          (<!>           name: toggle-aim              visible?: #f)
          (<!>           name: toggle-free-aim         visible?: #f)
          (<!>           name: toggle-mount            visible?: #f)
          (<!>           name: toggle-fly              visible?: #f))
        (<world-user!>                                 visible?: #t)
        (<world-spell!>
          (<!>           name: bomb                    visible?: #f)
          ;; for now as it enables jumping over kingdom bridge
          (<!>           name: run                     visible?: #f)
          (<!>           name: blink                   visible?: #f)
          (<!>           name: warp                    visible?: #f)
          (<!>           name: sprint                  visible?: #f))
        (<world-client!>
          (<!>           name: connect-to-server       visible?: #f)
          (<!>           name: disconnect-from-server  visible?: #f)
          (<!>           name: request-server-update   visible?: #f))
        (<world-camera!>
          (<!>           name: person-motion           visible?: #f)
          (<!>           name: orbit-motion            visible?: #f)
          (<!>           name: free-motion             visible?: #f)
          (<!>           name: toggle-camera-smoothing visible?: #f)
          (<!>           name: toggle-camera-lock      visible?: #f))
        (<world-graphics!>
          (<!>           name: toggle-lighting         visible?: #f)
          (<!>           name: toggle-fog              visible?: #f)
          (<!>           name: toggle-gadgets          visible?: #f)
          (<!>           name: toggle-normals          visible?: #f)
          (<!>           name: toggle-elements         visible?: #f)
          (<!>           name: toggle-post-processing  visible?: #f))
        (<world-interface!>
          (<!>           name: run-script              visible?: #f)
          (<!>           name: run-last-script         visible?: #f))
        (<world-edition!>                              visible?: #f
          (<!>           name: select-target-mode      visible?: #f)
          (<!>           name: move-target-mode        visible?: #f)
          (<!>           name: rotate-target-mode      visible?: #f)
          (<!>           name: scale-target-mode       visible?: #f)
          (<!>           name: gadgets-showcase        visible?: #f)
          (<!>           name: tiles-showcase          visible?: #f)
          (<!>           name: shaders-showcase        visible?: #f)
          (<!>           name: animations-showcase     visible?: #f)
          (<!>           name: meshes-showcase         visible?: #f)
          (<!>           name: textures-showcase       visible?: #f)
          (<!>           name: skyboxes-showcase       visible?: #f)
          (<!>           name: import-model            visible?: #f)
          (<!>           name: toggle-grid             visible?: #f)
          (<!>           name: toggle-grid-z           visible?: #f)
          (<!>           name: toggle-grid-y           visible?: #f)
          (<!>           name: toggle-grid-x           visible?: #f)
          (<!>           name: move-grid               visible?: #f)
          (<!>           name: decrease-grid           visible?: #f)
          (<!>           name: increase-grid           visible?: #f)
          (<!>           name: reload-textures         visible?: #f)
          (<!>           name: change-editor-mode      visible?: #f))
        (<world-history!>                              visible?: #f)
        (<world-window!>
          (<!>           name: live-gaia/world         visible?: #f)
          (<!>           name: design-gaia/world       visible?: #f)
          (<!>           name: restore-gaia/world      visible?: #f))
        (<world-tutorial!>)
        (<world-debug!>                                visible?: #f)
        (<world-minecraft!>
          (<!>           name: toggle-player-glow      visible?: #f)))))
  
  (define-trait user-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: world-new               visible?: #f)
        (<!>             name: world-open              visible?: #f)
        (<!>             name: world-save              visible?: #f)
        (<!>             name: world-revert            visible?: #f)
        (<!>             name: zone-new                visible?: #f)
        (<!>             name: zone-open               visible?: #f)
        (<!>             name: toggle-user             visible?: #f))))
  
  (define-trait user-game World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: bomb                    visible?: #f)
        ;; for now as it enables jumping over kingdom bridge
        (<!>             name: run                     visible?: #f)
        (<!>             name: blink                   visible?: #f)
        (<!>             name: warp                    visible?: #f)
        (<!>             name: sprint                  visible?: #f)
        (<!>             name: mind-control            visible?: #f)
        (<!>             name: toggle-aim              visible?: #f)
        (<!>             name: toggle-free-aim         visible?: #f)
        (<!>             name: toggle-mount            visible?: #f)
        (<!>             name: toggle-fly              visible?: #f))))
  
  (define-trait user-target World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f)))
  
  (define-trait user-interface World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: run-script              visible?: #f)
        (<!>             name: run-last-script         visible?: #f)
        (<!>             name: toggle-lighting         visible?: #f)
        (<!>             name: toggle-fog              visible?: #f)
        (<!>             name: toggle-gadgets          visible?: #f)
        (<!>             name: toggle-normals          visible?: #f)
        (<!>             name: toggle-elements         visible?: #f)
        (<!>             name: toggle-post-processing  visible?: #f))))

  (define-trait user-camera World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: person-motion           visible?: #f)
        (<!>             name: orbit-motion            visible?: #f)
        (<!>             name: free-motion             visible?: #f)
        (<!>             name: toggle-camera-smoothing visible?: #f)
        (<!>             name: toggle-camera-lock      visible?: #f))))

  (define-trait user-edition World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f
        (<!>             name: gadgets-showcase        visible?: #f)
        (<!>             name: tiles-showcase          visible?: #f)
        (<!>             name: shaders-showcase        visible?: #f)
        (<!>             name: animations-showcase     visible?: #f)
        (<!>             name: meshes-showcase         visible?: #f)
        (<!>             name: textures-showcase       visible?: #f)
        (<!>             name: skyboxes-showcase       visible?: #f)
        (<!>             name: change-editor-mode      visible?: #f))))

  (define-trait user-models World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: import-model            visible?: #f))))

  (define-trait user-history World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f)))
  
  (define-trait user-window World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: live-gaia/world         visible?: #f)
        (<!>             name: design-gaia/world       visible?: #f)
        (<!>             name: restore-gaia/world      visible?: #f))))
  
  (define-trait user-tutorial World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait user-objective World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait user-debug World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f)))
  
  (define-trait user-minecraft World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f)))

  (definition user-role
    `((:bindings ,user-bindings)
      (main ,user-main)
      (game ,user-game)
      (target ,user-target)
      (interface ,user-interface)
      (camera ,user-camera)
      (edition ,user-edition)
      (models ,user-models)
      (history ,user-history)
      (window ,user-window)
      (tutorial ,user-tutorial)
      (objective ,user-objective)
      (debug ,user-debug)
      (minecraft ,user-minecraft)))


  ;;;
  ;;;; Designer
  ;;;


  (define-trait designer-bindings Bindings
    (<Role-Trait>        name: designer
      (<install>
        (<world-menu!>
          (<!>           name: view-help               visible?: #f))
        (<world-world!>
          (<!>           name: world-new               visible?: #f)
          (<!>           name: world-open              visible?: #f)
          (<!>           name: world-save              visible?: #f)
          (<!>           name: world-save-as           visible?: #f)
          (<!>           name: world-revert            visible?: #f))
        (<world-game!>
          (<!>           name: mind-control            visible?: #f)
          (<!>           name: toggle-aim              visible?: #f)
          (<!>           name: toggle-free-aim         visible?: #f))
        (<world-client!>
          (<!>           name: connect-to-server       visible?: #f)
          (<!>           name: disconnect-from-server  visible?: #f)
          (<!>           name: request-server-update   visible?: #f))
        (<world-camera!>
          (<!>           name: toggle-camera-lock      visible?: #f))
        (<world-graphics!>
          (<!>           name: toggle-lighting         visible?: #f)
          (<!>           name: toggle-fog              visible?: #f)
          (<!>           name: toggle-gadgets          visible?: #f)
          (<!>           name: toggle-normals          visible?: #f)
          (<!>           name: toggle-elements         visible?: #f)
          (<!>           name: toggle-post-processing  visible?: #f))
        (<world-edition!>
          (<!>           name: select-target-mode      visible?: #f)
          (<!>           name: move-target-mode        visible?: #f)
          (<!>           name: rotate-target-mode      visible?: #f)
          (<!>           name: scale-target-mode       visible?: #f)
          (<!>           name: skeleton-target-mode    visible?: #f)
          (<!>           name: models-showcase         visible?: #f)
          (<!>           name: gadgets-showcase        visible?: #f)
          (<!>           name: tiles-showcase          visible?: #f)
          (<!>           name: shaders-showcase        visible?: #f)
          (<!>           name: animations-showcase     visible?: #f)
          (<!>           name: meshes-showcase         visible?: #f)
          (<!>           name: textures-showcase       visible?: #f)
          (<!>           name: import-model            visible?: #f)
          (<!>           name: toggle-grid             visible?: #f)
          (<!>           name: toggle-grid-z           visible?: #f)
          (<!>           name: toggle-grid-y           visible?: #f)
          (<!>           name: toggle-grid-x           visible?: #f)
          (<!>           name: move-grid               visible?: #f)
          (<!>           name: decrease-grid           visible?: #f)
          (<!>           name: increase-grid           visible?: #f)
          (<!>           name: reload-textures         visible?: #f)
          (<!>           name: change-editor-mode      visible?: #f))
        (<world-history!>
          (<!>           name: rewind-logic            visible?: #f)
          (<!>           name: step-logic              visible?: #f)
          (<!>           name: reset-history           visible?: #f)
          (<!>           name: toggle-evaluate-future  visible?: #f))
        (<world-window!>
          (<!>           name: live-gaia/world         visible?: #f)
          (<!>           name: design-gaia/world       visible?: #f)
          (<!>           name: restore-gaia/world      visible?: #f))
        (<world-tutorial!>)
        (<world-debug!>
          (<!>           name: toggle-target           visible?: #f)
          (<!>           name: toggle-script           visible?: #f)
          (<!>           name: toggle-axes             visible?: #f)
          (<!>           name: toggle-debug-sectors    visible?: #f)
          (<!>           name: toggle-debug-areas      visible?: #f)
          (<!>           name: toggle-draw-atlas       visible?: #f)
          (<!>           name: toggle-draw-me          visible?: #f)
          (<!>           name: toggle-gc-sound         visible?: #f)
          (<!>           name: change-missile-behavior visible?: #f)
          (<!>           name: reset-marks             visible?: #f)
          (<!>           name: clear-console           visible?: #f)
          (<!>           name: clear-terminal          visible?: #f)
          (<!>           name: garbage-collect         visible?: #f)
          (<!>           name: explore-interface       visible?: #f)
          (<!>           name: test1                   visible?: #f)
          (<!>           name: test2                   visible?: #f)
          (<!>           name: test3                   visible?: #f)
          (<!>           name: test4                   visible?: #f)
          (<!>           name: test5                   visible?: #f)
          (<!>           name: test6                   visible?: #f)
          (<!>           name: test7                   visible?: #f)
          (<!>           name: test8                   visible?: #f)
          (<!>           name: test9                   visible?: #f)
          (<!>           name: test0                   visible?: #f)))))
  
  (define-trait designer-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: world-new               visible?: #f)
        (<!>             name: world-open              visible?: #f)
        (<!>             name: world-save              visible?: #f)
        (<!>             name: world-revert            visible?: #f))))
  
  (define-trait designer-game World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: sprint                 visible?: #f)
        (<!>             name: mind-control           visible?: #f)
        (<!>             name: toggle-aim             visible?: #f)
        (<!>             name: toggle-free-aim        visible?: #f))))
  
  (define-trait designer-interface World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-lighting         visible?: #f)
        (<!>             name: toggle-fog              visible?: #f)
        (<!>             name: toggle-gadgets          visible?: #f)
        (<!>             name: toggle-normals          visible?: #f)
        (<!>             name: toggle-elements         visible?: #f)
        (<!>             name: toggle-post-processing  visible?: #f))))

  (define-trait designer-camera World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-camera-lock      visible?: #f))))

  (define-trait designer-edition World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: models-showcase         visible?: #f)
        (<!>             name: gadgets-showcase        visible?: #f)
        (<!>             name: tiles-showcase          visible?: #f)
        (<!>             name: shaders-showcase        visible?: #f)
        (<!>             name: animations-showcase     visible?: #f)
        (<!>             name: meshes-showcase         visible?: #f)
        (<!>             name: textures-showcase       visible?: #f)
        (<!>             name: toggle-grid             visible?: #f)
        (<!>             name: change-editor-mode      visible?: #f))))
  
  (define-trait designer-target World-Actionbar
    (<Role-Trait>
      (<install>                                       visible?: #f)))

  (define-trait designer-models World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: import-model            visible?: #f))))

  (define-trait designer-history World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: rewind-logic            visible?: #f)
        (<!>             name: step-logic              visible?: #f)
        (<!>             name: at-logic                visible?: #f)
        (<!>             name: reset-history           visible?: #f)
        (<!>             name: toggle-evaluate-future  visible?: #f))))
  
  (define-trait designer-window World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: live-gaia/world         visible?: #f)
        (<!>             name: design-gaia/world       visible?: #f)
        (<!>             name: restore-gaia/world      visible?: #f))))
  
  (define-trait designer-tutorial World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait designer-objective World-Actionbar
    (<Role-Trait>
      (<install>)))
  
  (define-trait designer-debug World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-target           visible?: #f)
        (<!>             name: toggle-script           visible?: #f)
        (<!>             name: toggle-axes             visible?: #f)
        (<!>             name: toggle-debug-sectors    visible?: #f)
        (<!>             name: toggle-debug-areas      visible?: #f)
        (<!>             name: toggle-draw-atlas       visible?: #f)
        (<!>             name: toggle-draw-me          visible?: #f)
        (<!>             name: change-missile-behavior visible?: #f)
        (<!>             name: reset-marks             visible?: #f)
        (<!>             name: clear-terminal          visible?: #f)
        (<!>             name: garbage-collect         visible?: #f)
        (<!>             name: explore-interface       visible?: #f))))

  (definition designer-role
    `((:bindings ,designer-bindings)
      (main ,designer-main)
      (game ,designer-game)
      (interface ,designer-interface)
      (camera ,designer-camera)
      (edition ,designer-edition)
      (target ,designer-target)
      (models ,designer-models)
      (history ,designer-history)
      (window ,designer-window)
      (tutorial ,designer-tutorial)
      (objective ,designer-objective)
      (debug ,designer-debug)))


  ;;;
  ;;;; Programmer
  ;;;


  (define-trait programmer-bindings Bindings
    (<Role-Trait> name: programmer
      (<install>)))
  
  (define-trait programmer-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!> name: world-new    visible?: #f)
        (<!> name: world-open   visible?: #f)
        (<!> name: world-save   visible?: #f)
        (<!> name: world-revert visible?: #f))))

  (definition programmer-role
    `((:bindings ,programmer-bindings)
      (main ,programmer-main))))


;;;
;;;; Preferences
;;;


(class Yownu-Preferences extends Application-Preferences
  
  
  (form
    (<install>                                   toplevel-state: restored toolbar-classes: ((:menubar . {Reference World-Menubar}) (:toolbar . {Reference World-Toolbar}) (:status . {Reference World-Status}))
      (<documents~>
        (<Jazz-Text-Preferences> name: jazz-text))
      (<Debug-Preferences>       name: debug))))


;;;
;;;; Bindings
;;;


(class Yownu-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<!>                       name: application visible?: #f)
      (<!>                       name: formatted-text visible?: #f)
      (<!>                       name: menubar visible?: #f)
      (<World-Menu-Actions>      name: world-menu)
      (<World-Interface-Actions> name: world-interface)
      (<World-Graphics-Actions>  name: world-graphics)
      (<World-Sound-Actions>     name: world-sound)
      (<World-Client-Actions>    name: world-client)
      (<World-World-Actions>     name: world-world)
      (<World-Zone-Actions>      name: world-zone)
      (<World-Movement-Actions>  name: world-movement)
      (<World-Camera-Actions>    name: world-camera)
      (<World-Game-Actions>      name: world-game)
      (<World-Spell-Actions>     name: world-spell)
      (<World-Edition-Actions>   name: world-edition)
      (<World-History-Actions>   name: world-history)
      (<World-Window-Actions>    name: world-window)
      (<World-Debug-Actions>     name: world-debug)
      (<World-Tutorial-Actions>  name: world-tutorial)
      (<World-Objective-Actions> name: world-objective)
      (<World-Collision-Actions> name: world-collision)
      (<World-Minecraft-Actions> name: world-minecraft)
      (<World-Anonymous-Actions> name: world-anonymous)
      (<World-User-Actions>      name: world-user visible?: #f)
      (<Yownu-Actions>           name: yownu))))


;;;
;;;; Actions
;;;


(class Yownu-Actions extends World-Actions
  
  
  (form
    (<install>                             title: "Yownu"
      (<Action-Item> name: teleport-player title: "Teleport Player" action-handler: {Event-Handler :application on-teleport-player} shortcut: {Shortcut :alt #\P}))))


;;;
;;;; Expressions
;;;


(define-expression define-objective
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("objective")))
