;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Scripts
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.script jazz


(import (jazz.io)
        (jazz.runtime))


;;;
;;;; Run
;;;


(definition public (yownu-run)
  (cond ((member? "analyse" (command-line))
         (yownu-analyse))
        (else
         (yownu-walk))))


;;;
;;;; Analyse
;;;


(definition (yownu-analyse)
  (initialize-aliases)
  (save-unreferenced-imports))


(definition (save-unreferenced-imports)
  (define (collect-unreferenced-imports unit-name)
    (let ((declaration (parameterize ((analysis-mode? #t))
                         (walk-unit unit-name))))
      (when (is? declaration Module-Declaration)
        (collect (lambda (import)
                   (when (not (get-hit?~ import))
                     (get-name import)))
                 (get-imports declaration)))))
  
  (let ((all '()))
    (iterate-units
      (lambda (unit-name)
        (feedback "Walking {a}..." unit-name)
        (let ((unreferenced (collect-unreferenced-imports unit-name)))
          (when (and unreferenced (not (null? unreferenced)))
            (set! all (cons (cons unit-name unreferenced) all)))))
      repositories: (list (jazz:find-repository 'World)
                          (jazz:find-repository 'Yownu)))
    (call-with-output-file (path-settings {File Home "unreferenced.jazz"} eol-encoding: (get-eol-encoding))
      (lambda (port)
        (pretty-print (sort string<? all key: (lambda (info) (symbol->string (car info))))
                      port)))
    (feedback "Done")))


;;;
;;;; Walk
;;;


(definition (yownu-walk)
  ;; we need to use generate-unit as warnings are reported in the generate phase
  (iterate-units generate-unit
    repositories: (list (jazz:find-repository 'World)
                        (jazz:find-repository 'Yownu))
    feedback: (lambda (unit-name)
                (terminal 'walking unit-name))))


;;;
;;;; Product
;;;


(register-product-run 'yownu-script
  (lambda (descriptor)
    (yownu-run))))
