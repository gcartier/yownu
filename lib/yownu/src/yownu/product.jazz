;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Product
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.product jazz


(import (jazz.io)
        (jazz.product))


;;;
;;;; Build
;;;


(definition (build descriptor (unit: unit #f) (force?: force? #f))
  (define (resources-dir)
    (let ((bundle (product-descriptor-build-bundle descriptor)))
      (if bundle
          (new-directory~ {Directory Build} (format "{a}.app/Contents/Resources" bundle))
        {Directory Build})))
  
  (define (macos-dir)
    (let ((bundle (product-descriptor-build-bundle descriptor)))
      (if bundle
          (new-directory~ {Directory Build} (format "{a}.app/Contents/MacOS" bundle))
        #f)))
  
  (let ((project-dir {Directory Yownu})
        (resources-dir (resources-dir))
        (macos-dir (macos-dir)))
    (define (install-file path)
      (let ((src (new-file~ project-dir path))
            (dst (new-file~ resources-dir path)))
        (install-file~ src dst
          feedback: (lambda (action pathname)
                      (build-feedback "; {a} {a}..." action (get-name~ pathname))))))
    
    (define (install-directory path (src #f) (dst #f))
      (let ((src (new-directory~ project-dir (or src path)))
            (dst (new-directory~ resources-dir (or dst path))))
        (install-directory~ src dst
          feedback: (let ((first? #t))
                      (lambda (action pathname)
                        (when first?
                          (build-feedback "; {a} {a}..." action (get-name~ pathname))
                          (set! first? #f)))))))
    
    (define (copy-info)
      (install-file '("README"))
      (install-file '("devel" "yownu" "About.ftx"))
      (install-file '("devel" "yownu" "Help.ftx"))
      (install-file '("devel" "yownu" "News.ftx") )
      (install-file '("devel" "yownu" "Roadmap.ftx")))
    
    (define (copy-assets)
      (install-directory '("world" "lib" "world.client" "assets"))
      (install-directory '("lib" "yownu" "assets")))
    
    (define (copy-doc)
      (install-directory '("world" "lib" "world.website" "content")))
    
    (define (copy-external)
      (when (eq? kernel-platform 'windows)
        (install-file '("devel" "external" "fbx-conv" "windows" "fbx-conv.exe"))))
    
    (define (copy-templates)
      (install-directory '("devel" "templates")))
    
    (define (copy-worker)
      (when (eq? kernel-platform 'mac)
        (install-directory~ {Directory Build "yownu-worker.app"} (new-directory~ macos-dir "yownu-worker.app")
          feedback: (lambda (action pathname)
                      (build-feedback "; {a} {a}..." action (get-name~ pathname))))))
    
    (build-product-descriptor descriptor unit: unit force?: force?)
    (initialize-aliases)
    (copy-info)
    (copy-assets)
    (copy-doc)
    (copy-external)
    (copy-templates)
    (copy-worker)))


;;;
;;;; Install
;;;


(cond-expand
  (mac
    (definition install-dir
      {Directory Home "Devel" "yownu" "install"})
    
    (definition yownu-world
      "Yownu-World"))
  (else
    (definition install-dir
      {Directory Home "yownu" "install"})
    
    (definition yownu-world
      "yownu-world")))


(definition (install descriptor)
  (initialize-aliases)
  (install-application descriptor install-dir
    scriptable?: #t
    platform?: #t
    opengl?: #t
    git?: #t
    audio?: #t
    files: (cond-expand
             (windows '("README" "yownu-worker.exe"))
             (else '("README")))
    directories: '("devel"))
  (let ((root-dir (get-parent~ (get-parent~ {Directory Yownu}))))
    (let ((world-dir (new-directory~ root-dir '("worlds" "yownu")))
          (installation-dir (new-directory~ install-dir yownu-world)))
      (install-directory~ world-dir installation-dir
        filter: (lambda (action pathname)
                  (if (filename=? (get-name~ pathname) ".git")
                      #f
                    #t))
        feedback: (lambda (action pathname)
                    (build-feedback "; {a} {a}..." action (get-name~ pathname)))))))


;;;
;;;; Deploy
;;;


(definition installation-dirname
  (cond-expand
    (mac "yownu.app")
    (windows "yownu")))


(definition (deploy descriptor)
  (initialize-aliases)
  (deploy-application descriptor
                      (new-directory~ install-dir installation-dirname)
                      make: 'yownu-all
                      install: 'yownu)
  (feedback "")
  (deploy-directory 'world (new-directory~ install-dir yownu-world)))


;;;
;;;; Register
;;;


(register-product 'yownu
  build: build
  install: install
  deploy: deploy))
