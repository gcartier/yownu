;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu Start
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.start jazz


(import (jazz.io)
        (jazz.opengl.glew)
        (jazz.opengl.window)
        (jazz.platform)
        (jazz.settings)
        (world)
        (world.boot)
        (world.capabilities)
        (world.colors)
        (world.context)
        (world.fonts)
        (world.io)
        (world.profiling)
        (world.settings)
        (world.task)
        (yownu.application)
        (yownu.process)
        (yownu.run)
        (yownu.settings)
        (yownu.windows (cond windows)))


(definition (start-yownu)
  (cond ;; OpenGL version
        ((command-argument "glversion")
         (initialize-platform)
         (new-opengl-window render?: #f visible?: #f)
         (system-message (format "OpenGL {a}" (glGetString GL_VERSION))))
        ;; OpenGL extension
        ((command-argument "glextension")
         => (lambda (arg)
              (initialize-platform)
              (new-opengl-window render?: #f visible?: #f)
              (system-message (format "OpenGL extension {a}" (check-extension arg)))))
        ;; OpenGL information
        ((command-argument "glinformation")
         (initialize-platform)
         (new-opengl-window render?: #f visible?: #f)
         (system-message (let ((output (open-output-string)))
                           (describe-capabilities output)
                           (get-output-string output))))
        ;; Create server
        ((command-argument "create-server")
         (let ((server-name (string-argument "create-server"))
               (server-address (string-argument "server-address" "*"))
               (server-port (string-argument "server-port" "50000"))
               (name (string-argument "name" "Server"))
               (avatar (string-argument "avatar" "character/dwarfmale")))
           (create-server-file server-name server-address server-port name avatar)
           (format :terminal "Server {a} created{%}" server-name)))
        ;; Create client
        ((command-argument "create-client")
         (let ((client-name (string-argument "create-client"))
               (server-address (string-argument "server-address" "localhost"))
               (server-port (string-argument "server-port" "50000"))
               (name (string-argument "name"))
               (avatar (string-argument "avatar" "character/bloodelffemale"))
               (script (string-argument "script" #f)))
           (create-client-file client-name server-address server-port name avatar script)
           (format :terminal "Client {a} created{%}" client-name)))
        ;; Create clients
        ((command-argument "create-clients")
         (let ((client-prefix (string-argument "create-clients"))
               (count (integer-argument "count" 5))
               (server-address (string-argument "server-address" "localhost"))
               (server-port (string-argument "server-port" "50000"))
               (script (string-argument "script" #f)))
           ;; all these initializations are a quick hack to
           ;; have a working world needed to collect avatar models
           (set-window? #f)
           (setup-profiling)
           (register-yownu-aliases)
           (register-yownu-world)
           (open-world 'local (new-file (find-world "yownu") ".world") start-zone: 'none)
           (create-client-files client-prefix count server-address server-port script)
           (format :terminal "Clients {a}1..{a} created{%}" client-prefix count)))
        ;; Boot client
        (else
         (load-point 'start)
         ;; hack around what appears to be a gambit bug that results in ultra
         ;; weird behavior on windows especially for large values like 1000000
         (cond-expand
           (windows)
           (else
            (set-min-heap! (* 500000 1024))))
         (set-window? (boolean-argument "window" #t))
         (when (window?)
           (initialize-platform))
         (boot-client (if (window?) Yownu-Application Yownu-Process)
                      start: (lambda ()
                               (boot-world 'client "yownu"))))))


(set-yownu-start start-yownu))
