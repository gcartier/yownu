;;;=========
;;;  Yownu
;;;=========
;;;
;;;; Yownu World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module yownu.world jazz


(import (gambit.walk)
        (jazz.audio)
        (jazz.cairo)
        (jazz.component)
        (jazz.debuggee)
        (jazz.detprof)
        (jazz.development)
        (jazz.editor.jazz)
        (jazz.event)
        (jazz.foreign)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.jrm.protocol)
        (jazz.logger)
        (jazz.media)
        (jazz.network)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.platform)
        (jazz.runtime)
        (jazz.skin)
        (jazz.snapshot)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace)
        (jazz.zlib)
        (profiler)
        (time)
        (world)
        (world.actor)
        (world.album)
        (world.animation)
        (world.area)
        (world.atlas)
        (world.audio)
        (world.autoload)
        (world.binary)
        (world.block)
        (world.blocks)
        (world.camera)
        (world.collision)
        (world.configure)
        (world.debug)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.enemy)
        (world.entity)
        (world.external)
        (world.external.milkshape)
        (world.external.minecraft)
        (world.external.minecraft.generate)
        (world.external.nbt)
        (world.external.obj)
        (world.fog)
        (world.folio)
        (world.foreign)
        (world.foreign.obj)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.history)
        (world.homogeneous)
        (world.info)
        (world.interface)
        (world.interface.bars)
        (world.interface.color)
        (world.interface.dialogs)
        (world.interface.documents)
        (world.interface.inventory)
        (world.interface.pane)
        (world.interface.skin)
        (world.io)
        (world.keys)
        (world.light)
        (world.light-syntax)
        (world.lighting)
        @log (world.log)
        (world.lookat)
        (world.manager)
        (world.mark)
        (world.material)
        (world.memory)
        (world.mesh)
        (world.model)
        (world.motion)
        (world.object)
        (world.opengl)
        (world.plane)
        (world.planet)
        (world.player)
        (world.polygon)
        (world.procedural)
        (world.profiling)
        (world.programs)
        (world.quad)
        (world.queue)
        (world.render)
        (world.renderer)
        (world.renderers)
        (world.sector)
        (world.settings)
        (world.shader)
        (world.shaders)
        (world.skybox)
        (world.support)
        (world.syntax (phase syntax))
        (world.target)
        (world.task)
        (world.texture)
        (world.triangle)
        (world.user)
        (world.view)
        (world.w3d)
        (world.window)
        (world.work)
        (world.zone)
        (yownu.biome))


(definition user-zones
  {Directory Settings "zones"})


(class Yownu-World extends World
  
  
  (method override (zone-based?)
    #t)
  
  
  (method override (get-zones-directories)
    (if (exists?~ user-zones)
        (cons user-zones (nextmethod))
      (nextmethod)))
  
  
  (method override (new-zone-file base)
    (let ((path (split base "/")))
      (new-file~ user-zones (append path (list (zone-filename (last path)))))))
  
  
  (method override (update-title)
    (define (present-zone)
      (let ((zone (current-zone+)))
        (if (not zone)
            "New"
          (present-title (get-moniker~ zone) (get-modified?~ zone)))))
    
    (define (present-title moniker modified?)
      (format "{a}{a}"
              (present-name moniker)
              (present-modified modified?)))
    
    (define (present-name moniker)
      (if (not moniker)
          "New"
        (get-name~ (get-parent~ moniker))))
    
    (define (present-modified modified?)
      (if modified?
          " *"
        ""))
    
    (set-title~ window (format "Yownu - {a}"
                               (present-zone))))))
