;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Space World
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module space.world jazz


(import (jazz.development)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.glew)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.logger)
        (jazz.media)
        (jazz.network)
        (jazz.platform)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (time)
        (world)
        (world.actor)
        (world.animation)
        (world.area)
        (world.atlas)
        (world.autoload)
        (world.block)
        (world.collision)
        (world.counter)
        (world.debug)
        (world.draw)
        (world.dye)
        (world.dyes)
        (world.element)
        (world.enemy)
        (world.entity)
        (world.external)
        (world.external.milkshape)
        (world.external.obj)
        (world.fog)
        (world.folio)
        (world.foreign)
        (world.foreign.obj)
        (world.gadget)
        (world.generate)
        (world.geometry)
        (world.gravity)
        (world.history)
        (world.homogeneous)
        (world.interface)
        (world.interface.bars)
        (world.interface.dialogs)
        (world.io)
        (world.light)
        (world.lookat)
        (world.mark)
        (world.material)
        (world.mesh)
        (world.model)
        (world.object)
        (world.opengl)
        (world.plane)
        (world.planet)
        (world.player)
        (world.polygon)
        (world.procedural)
        (world.profiling)
        (world.programs)
        (world.quad)
        (world.render)
        (world.sector)
        (world.serialization)
        (world.settings)
        (world.shader)
        (world.shaders)
        (world.support)
        (world.syntax (phase syntax))
        (world.texture)
        (world.tile)
        (world.triangle)
        (world.user)
        (world.view)
        (world.window)
        (world.zone)
        (space.biome))


(definition user-zones
  {Directory Settings "zones"})


(class Space-World extends World
  
  
  (method override (zone-based?)
    #t)
  
  
  (method override (get-zones-directories)
    (if (and (user-assets?) (exists?~ user-zones))
        (cons user-zones (nextmethod))
      (nextmethod)))
  
  
  (method override (zone-writable? moniker)
    (and moniker (or writable?
                     (pathname=? (get-parent~ moniker) user-zones))))
  
  
  (method override (new-zone-file base)
    (if (and newable? (get-world-directory))
        (nextmethod base)
      (new-file~ user-zones (make-filename base "zone"))))
  
  
  (method override (update-title)
    (define (present-zone)
      (let ((zone (current-zone+)))
        (if (not zone)
            "New"
          (present-title (get-moniker~ zone) (get-modified?~ zone)))))
    
    (define (present-title moniker modified?)
      (format "{a}{a}"
              (present-name moniker)
              (present-modified modified?)))
    
    (define (present-name moniker)
      (if (not moniker)
          "New"
        (get-base~ moniker)))
    
    (define (present-modified modified?)
      (if modified?
          " *"
        ""))
    
    (set-title~ window (format "Space - {a}"
                               (present-zone))))))
