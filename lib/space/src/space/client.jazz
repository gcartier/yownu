;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Space Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module space.client jazz


(import (jazz.graphic)
        (jazz.graphic.opengl.window)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.client)
        (world.client.actions)
        (world.settings)
        (world.syntax (phase syntax))
        (space.window))


(class Space-Client extends World-Client
  
  
  (slot space-settings initialize #f getter generate)

  
  (method override (process-name)
    "Space")
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? #t 'default) (shift-down?)))
          (pos (find-setting 'world.position {Point 50 50}))
          (size (find-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: Space-Window fullscreen?: fullscreen? position: pos size: size visible?: #f)))
  
  
  (method override (settings-root)
    {Directory Home ".space"})
  
  
  (method override (settings-alias)
    'App)
  
  
  (method override (initialize-app)
    (register-alias 'App
                    (list (if (is-alias? 'Space)
                              'Space
                            'Build))))
  
  
  (method override (initialize-settings)
    (nextmethod)
    (register-alias 'Root (get-list~ (get-parent~ (get-parent~ {Directory App}))))
    (register-alias 'Space-World '(Root "worlds" "space"))
    (set! space-settings (new File-Settings))
    (register-settings space-settings)
    (set-setting~ space-settings 'world.world-directories '(("space" . {Directory Space-World})))
    (set-setting~ space-settings 'world.worlds-directories #f)
    (set-setting~ space-settings 'world.user-assets? #f))
  
  
  (method override (default-bindings)
    (new Space-Bindings))
  
  
  (method override (use-profile?)
    #f)

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'space))
            (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-teleport-player evt)
    (place-player~ (current-zone))))


;;;
;;;; Bindings
;;;


(class Space-Bindings extends World-Bindings
  
  
  (form
    (<install>
      (<Space-Actions> name: space))))


;;;
;;;; Space
;;;


(class Space-Actions extends World-Actions
  
  
  (form
    (<install>                             title: "Space"
      (<Action-Item> name: teleport-player title: "Teleport Player" action-handler: {Event-Handler :application on-teleport-player} shortcut: {Shortcut :alt #\P})))))
