;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Space Client
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module space.client jazz


(import (jazz.debuggee)
        (jazz.graphic)
        (jazz.graphic.opengl.window)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (world)
        (world.autoload)
        (world.client)
        (world.client.actions)
        (world.client.bars)
        (world.interface)
        (world.interface.actions)
        (world.interface.bars)
        (world.role)
        (world.settings)
        (world.syntax (phase syntax))
        (space.window)
        (space.zone))


(class Space-Client extends World-Client
  
  
  (slot space-settings initialize #f getter generate)

  
  (method override (process-name)
    "Space")
  
  
  (method override (new-toplevel)
    (let ((fullscreen? (xor (world-setting 'world.fullscreen? (not (get-controller-debugger)) 'default) (shift-down?)))
          (pos (find-setting 'world.position {Point 50 50}))
          (size (find-setting 'world.size {Dimension 1200 800})))
      (new-opengl-window class: Space-Window fullscreen?: fullscreen? position: pos size: size visible?: #f)))
  
  
  (method override (settings-root)
    {Directory Home ".space"})
  
  
  (method override (settings-alias)
    'App)
  
  
  (method override (initialize-app)
    (register-alias 'App
                    (list (if (is-alias? 'Space)
                              'Space
                            'Build))))
  
  
  (method override (initialize-settings)
    (nextmethod)
    (register-alias 'Root (get-list~ (get-parent~ (get-parent~ {Directory App}))))
    (register-alias 'Space-World '(Root "worlds" "space"))
    (set! space-settings (new File-Settings))
    (register-settings space-settings)
    (set-setting~ space-settings 'world.world-directories '(("space" . {Directory Space-World})))
    (set-setting~ space-settings 'world.worlds-directories #f))
  
  
  (method override (default-bindings)
    (new Space-Bindings))
  
  
  (method override (use-profile?)
    #f)
  
  
  (method override (finish-process)
    (nextmethod)
    (install-role (find-setting 'world.role 'user)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (append (list (find-actions 'space))
            (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-teleport-player evt)
    (let ((zone (current-zone)))
      (if (is? zone Space-Zone)
          (place-player~ zone)
        (bell))))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (news-file)
    (world-file '("devel" "space" "News.ftx") 'App))
  
  
  (method override (roadmap-file)
    (world-file '("devel" "space" "Roadmap.ftx") 'App))
  
  
  (method override (help-file)
    (world-file '("devel" "space" "Help.ftx") 'App))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method override (setup-application-interface)
    (install-bars
      `((,World-Main-Bar      main      horizontal (center -10))
        (,World-Game-Bar      game      horizontal (center -36))
        (,World-Window-Bar    window    horizontal (-10 -10))
        (,World-Camera-Bar    camera    horizontal (-10 -36))
        (,World-Debug-Bar     debug     horizontal (10 -10))
        (,World-History-Bar   history   horizontal (10 -36))
        (,World-Models-Bar    models    horizontal (10 -24.) #f)
        (,World-Target-Bar    target    horizontal (-10 10))
        (,World-Edition-Bar   edition   vertical   (-36 center))
        (,World-Interface-Bar interface vertical   (-10 center))
        (,World-Collision-Bar collision horizontal (-10 36) #f))))


  ;;;
  ;;;; Roles
  ;;;


  (method public (user-role?)
    (eq? current-role 'user))


  (method public (programmer-role?)
    (eq? current-role 'programmer))


  (define-trait user-bindings Bindings
    (<Role-Trait>
      (<install>
        (<world-menu!>
          (<!>           name: view-help              visible?: #f))
        (<world-interface!>
          (<!>           name: toggle-mode            visible?: #f))
        (<world-world!>
          (<!>           name: world-new              visible?: #f)
          (<!>           name: world-open             visible?: #f)
          (<!>           name: world-save             visible?: #f)
          (<!>           name: world-save-as          visible?: #f)
          (<!>           name: world-revert           visible?: #f))
        (<world-server!>
          (<!>           name: connect-to-server      visible?: #f)
          (<!>           name: disconnect-from-server visible?: #f)
          (<!>           name: request-server-update  visible?: #f))
        (<world-camera!>
          (<!>           name: toggle-3d              visible?: #f)
          (<!>           name: toggle-camera-lock     visible?: #f))
        (<world-graphics!>
          (<!>           name: toggle-lighting        visible?: #f)
          (<!>           name: toggle-projection      visible?: #f)
          (<!>           name: toggle-gadgets         visible?: #f))
        (<world-edition!>
          (<!>           name: textures-showcase      visible?: #f)
          (<!>           name: import-model           visible?: #f)
          (<!>           name: reload-textures        visible?: #f))
        (<world-history!>
          (<!>           name: toggle-history         visible?: #f)
          (<!>           name: reset-history          visible?: #f)
          (<!>           name: toggle-evaluate-future visible?: #f))
        (<world-window!>
          (<!>           name: live-gaia/world        visible?: #f)
          (<!>           name: design-gaia/world      visible?: #f)
          (<!>           name: restore-gaia/world     visible?: #f))
        (<world-debug!>
          (<!>           name: toggle-debug-sectors   visible?: #f)
          (<!>           name: toggle-debug-areas     visible?: #f)
          (<!>           name: toggle-draw-atlas      visible?: #f)
          (<!>           name: toggle-draw-me         visible?: #f)
          (<!>           name: toggle-gc-sound        visible?: #f)
          (<!>           name: reset-marks            visible?: #f)
          (<!>           name: clear-console          visible?: #f)
          (<!>           name: clear-terminal         visible?: #f)
          (<!>           name: garbage-collect        visible?: #f)
          (<!>           name: explore-interface      visible?: #f)
          (<!>           name: test1                  visible?: #f)
          (<!>           name: test2                  visible?: #f)
          (<!>           name: test3                  visible?: #f)
          (<!>           name: test4                  visible?: #f)
          (<!>           name: test5                  visible?: #f)
          (<!>           name: test6                  visible?: #f)
          (<!>           name: test7                  visible?: #f)
          (<!>           name: test8                  visible?: #f)
          (<!>           name: test9                  visible?: #f)
          (<!>           name: test0                  visible?: #f)))))
  
  (define-trait user-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: world-new              visible?: #f)
        (<!>             name: world-open             visible?: #f)
        (<!>             name: world-save             visible?: #f)
        (<!>             name: world-revert           visible?: #f))))
  
  (define-trait user-interface World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-lighting        visible?: #f)
        (<!>             name: toggle-gadgets         visible?: #f))))

  (define-trait user-camera World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-camera-lock     visible?: #f))))

  (define-trait user-edition World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: textures-showcase      visible?: #f))))

  (define-trait user-history World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-history         visible?: #f)
        (<!>             name: reset-history          visible?: #f)
        (<!>             name: toggle-evaluate-future visible?: #f))))
  
  (define-trait user-window World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: live-gaia/world        visible?: #f)
        (<!>             name: design-gaia/world      visible?: #f)
        (<!>             name: restore-gaia/world     visible?: #f))))
  
  (define-trait user-debug World-Actionbar
    (<Role-Trait>
      (<install>
        (<!>             name: toggle-debug-sectors   visible?: #f)
        (<!>             name: toggle-debug-areas     visible?: #f)
        (<!>             name: toggle-draw-atlas      visible?: #f)
        (<!>             name: toggle-draw-me         visible?: #f)
        (<!>             name: reset-marks            visible?: #f)
        (<!>             name: clear-terminal         visible?: #f)
        (<!>             name: garbage-collect        visible?: #f)
        (<!>             name: explore-interface      visible?: #f))))

  (definition user-role
    `((:bindings ,user-bindings)
      (main ,user-main)
      (interface ,user-interface)
      (camera ,user-camera)
      (edition ,user-edition)
      (history ,user-history)
      (window ,user-window)
      (debug ,user-debug)))


  (define-trait programmer-bindings Bindings
    (<Role-Trait>
      (<install>)))
  
  (define-trait programmer-main World-Actionbar
    (<Role-Trait>
      (<install>
        (<!> name: world-new    visible?: #f)
        (<!> name: world-open   visible?: #f)
        (<!> name: world-save   visible?: #f)
        (<!> name: world-revert visible?: #f))))

  (definition programmer-role
    `((:bindings ,programmer-bindings)
      (main ,programmer-main)))
  
  
  (method override (role-traits role)
    (case role
      ((user) user-role)
      ((programmer) programmer-role)
      (else (nextmethod role)))))


;;;
;;;; Bindings
;;;


(class Space-Bindings extends World-Bindings
  
  
  (form
    (<install>
      (<Space-Actions> name: space))))


;;;
;;;; Actions
;;;


(class Space-Actions extends World-Actions
  
  
  (form
    (<install>                             title: "Space"
      (<Action-Item> name: teleport-player title: "Teleport Player" action-handler: {Event-Handler :application on-teleport-player} shortcut: {Shortcut :alt #\P})))))
