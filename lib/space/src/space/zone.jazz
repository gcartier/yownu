;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Space Zone
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 2012-2013
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):


(module space.zone jazz


(import (jazz.jml)
        (jazz.system)
        (world)
        (world.atlas)
        (world.autoload)
        (world.geometry)
        (world.light)
        (world.planet)
        (world.profiling)
        (world.syntax (phase syntax))
        (world.zone)
        (space.biome))


(class Space-Zone extends Zone
  
  
  (form
    (<install> floor-level: #f))
  
  
  ;;;
  ;;;; Gravity
  ;;;
  
  
  (method override (variable-up?)
    #t)
  
  
  ;;;
  ;;;; Populate
  ;;;
  
  
  (method override (populate-zone)
    (let ((space-radius (find-setting 'space.radius 250.))
          (space-density (find-setting 'space.density 5)))
      (define (place-planets)
        (loop (repeat space-density)
              (let ((position (random-space))
                    (size (random-between (find-setting 'space.planet-min-size 5.) (find-setting 'space.planet-max-size 50.)))
                    (biome (random-biome)))
                (let ((image (get-earth~ biome)))
                  (let ((planet (new Planet parent: self position: position size: size image: image)))
                    (generate-planet~ planet)
                    (add-element planet)
                    (let ((trees (get-trees~ biome)))
                      (when trees
                        (populate-trees planet trees))))))))
      
      (define (random-space)
        (vertex (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)
                (random-between (- space-radius) space-radius)))
      
      (profiling 'populate (lambda () (place-planets)))
      (place-player)))
  
  
  (method (populate-trees planet trees)
    (let ((world (current-world)))
      (let ((size (get-size~ planet)))
        (loop (repeat (random (fxround (* (find-setting 'space.planet-trees 10.) size))))
              (let ((model (random-element trees)))
                (receive (dir pos) (random-position planet)
                  (let ((entity (place-model~ world model pos savable?: #f)))
                    (realign-lookat~ entity dir))))))))
  
  
  (method (place-player)
    (let ((me (current-me))
          (planets (collect-planets)))
      (unless (null? planets)
        (let ((planet (random-element planets)))
          (receive (dir pos) (random-position planet 25.)
            (set-position~ me pos)
            (realign-lookat~ me dir))))))
  
  
  (method (random-position planet (surface-distance 0.))
    (let ((world (current-world)))
      (let ((position (get-position~ planet))
            (radius (get-radius~ planet))
            (dir (random-direction)))
        (let ((pos (vertex+ position (vertex-scalar* dir (+ radius surface-distance)))))
          (values dir pos)))))
  
  
  ;;;
  ;;;; Blocks
  ;;;
  
  
  (method override (create-atlas)
    (let ((world (current-world)))
      (if (not (get-earth?~ world))
          (nextmethod)
        (or (registered-atlas 'space)
            (let ((atlas (create-space-atlas)))
              (register-atlas 'space atlas)
              atlas)))))
  
  
  (method (create-space-atlas)
    (let ((world (current-world)))
      (make-block-atlas~ world
        adder: (lambda (atlas)
                 (add-file~ atlas (find-texture-file~ world "earth.png"))))))
  
  
  ;;;
  ;;;; Skybox
  ;;;
  
  
  (method override (prepare-skybox)
    (install-skybox (find-skybox "nebula")))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (zone-editable?)
    #f)))
